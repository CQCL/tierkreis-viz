// source: v1alpha/graph.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.tierkreis.v1alpha.graph.BoxNode', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Constraint', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Constraint.ConstraintCase', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Edge', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Empty', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.FunctionName', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Graph', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.GraphType', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Kind', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Kind.KindCase', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.LacksConstraint', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Location', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.MapValue', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Node', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Node.NodeCase', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Output', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.OutputStream', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.PairType', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.PairValue', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.PartitionConstraint', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.RowType', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.StructType', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.StructType.NameOptCase', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.StructValue', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Type', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Type.TypeCase', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.TypeScheme', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.TypeSchemeVar', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Value', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.Value.ValueCase', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.VariantValue', null, global);
goog.exportSymbol('proto.tierkreis.v1alpha.graph.VecValue', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tierkreis.v1alpha.graph.Location.repeatedFields_, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Location.displayName = 'proto.tierkreis.v1alpha.graph.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.StructValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.StructValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.StructValue.displayName = 'proto.tierkreis.v1alpha.graph.StructValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.PairValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.PairValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.PairValue.displayName = 'proto.tierkreis.v1alpha.graph.PairValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.MapValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tierkreis.v1alpha.graph.MapValue.repeatedFields_, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.MapValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.MapValue.displayName = 'proto.tierkreis.v1alpha.graph.MapValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.VecValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tierkreis.v1alpha.graph.VecValue.repeatedFields_, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.VecValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.VecValue.displayName = 'proto.tierkreis.v1alpha.graph.VecValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.VariantValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.VariantValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.VariantValue.displayName = 'proto.tierkreis.v1alpha.graph.VariantValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tierkreis.v1alpha.graph.Value.oneofGroups_);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Value.displayName = 'proto.tierkreis.v1alpha.graph.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Output.displayName = 'proto.tierkreis.v1alpha.graph.Output';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.OutputStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tierkreis.v1alpha.graph.OutputStream.repeatedFields_, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.OutputStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.OutputStream.displayName = 'proto.tierkreis.v1alpha.graph.OutputStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tierkreis.v1alpha.graph.Type.oneofGroups_);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Type.displayName = 'proto.tierkreis.v1alpha.graph.Type';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.GraphType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.GraphType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.GraphType.displayName = 'proto.tierkreis.v1alpha.graph.GraphType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.PairType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.PairType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.PairType.displayName = 'proto.tierkreis.v1alpha.graph.PairType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.RowType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.RowType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.RowType.displayName = 'proto.tierkreis.v1alpha.graph.RowType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.StructType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tierkreis.v1alpha.graph.StructType.oneofGroups_);
};
goog.inherits(proto.tierkreis.v1alpha.graph.StructType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.StructType.displayName = 'proto.tierkreis.v1alpha.graph.StructType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.FunctionName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tierkreis.v1alpha.graph.FunctionName.repeatedFields_, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.FunctionName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.FunctionName.displayName = 'proto.tierkreis.v1alpha.graph.FunctionName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.BoxNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.BoxNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.BoxNode.displayName = 'proto.tierkreis.v1alpha.graph.BoxNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tierkreis.v1alpha.graph.Node.oneofGroups_);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Node.displayName = 'proto.tierkreis.v1alpha.graph.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Edge.displayName = 'proto.tierkreis.v1alpha.graph.Edge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tierkreis.v1alpha.graph.Graph.repeatedFields_, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Graph.displayName = 'proto.tierkreis.v1alpha.graph.Graph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Empty.displayName = 'proto.tierkreis.v1alpha.graph.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.TypeScheme = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tierkreis.v1alpha.graph.TypeScheme.repeatedFields_, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.TypeScheme, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.TypeScheme.displayName = 'proto.tierkreis.v1alpha.graph.TypeScheme';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.TypeSchemeVar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.TypeSchemeVar.displayName = 'proto.tierkreis.v1alpha.graph.TypeSchemeVar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Constraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tierkreis.v1alpha.graph.Constraint.oneofGroups_);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Constraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Constraint.displayName = 'proto.tierkreis.v1alpha.graph.Constraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.PartitionConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.PartitionConstraint.displayName = 'proto.tierkreis.v1alpha.graph.PartitionConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.LacksConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tierkreis.v1alpha.graph.LacksConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.LacksConstraint.displayName = 'proto.tierkreis.v1alpha.graph.LacksConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tierkreis.v1alpha.graph.Kind = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tierkreis.v1alpha.graph.Kind.oneofGroups_);
};
goog.inherits(proto.tierkreis.v1alpha.graph.Kind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tierkreis.v1alpha.graph.Kind.displayName = 'proto.tierkreis.v1alpha.graph.Kind';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tierkreis.v1alpha.graph.Location.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    locationList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Location}
 */
proto.tierkreis.v1alpha.graph.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Location;
  return proto.tierkreis.v1alpha.graph.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Location}
 */
proto.tierkreis.v1alpha.graph.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocationList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string location = 1;
 * @return {!Array<string>}
 */
proto.tierkreis.v1alpha.graph.Location.prototype.getLocationList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tierkreis.v1alpha.graph.Location} returns this
 */
proto.tierkreis.v1alpha.graph.Location.prototype.setLocationList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.Location} returns this
 */
proto.tierkreis.v1alpha.graph.Location.prototype.addLocation = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.Location} returns this
 */
proto.tierkreis.v1alpha.graph.Location.prototype.clearLocationList = function() {
  return this.setLocationList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.StructValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.StructValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.StructValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.StructValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapMap: (f = msg.getMapMap()) ? f.toObject(includeInstance, proto.tierkreis.v1alpha.graph.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.StructValue}
 */
proto.tierkreis.v1alpha.graph.StructValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.StructValue;
  return proto.tierkreis.v1alpha.graph.StructValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.StructValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.StructValue}
 */
proto.tierkreis.v1alpha.graph.StructValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader, "", new proto.tierkreis.v1alpha.graph.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.StructValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.StructValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.StructValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.StructValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter);
  }
};


/**
 * map<string, Value> map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tierkreis.v1alpha.graph.Value>}
 */
proto.tierkreis.v1alpha.graph.StructValue.prototype.getMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.tierkreis.v1alpha.graph.Value>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.tierkreis.v1alpha.graph.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tierkreis.v1alpha.graph.StructValue} returns this
 */
proto.tierkreis.v1alpha.graph.StructValue.prototype.clearMapMap = function() {
  this.getMapMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.PairValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.PairValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.PairValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.PairValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    first: (f = msg.getFirst()) && proto.tierkreis.v1alpha.graph.Value.toObject(includeInstance, f),
    second: (f = msg.getSecond()) && proto.tierkreis.v1alpha.graph.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.PairValue}
 */
proto.tierkreis.v1alpha.graph.PairValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.PairValue;
  return proto.tierkreis.v1alpha.graph.PairValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.PairValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.PairValue}
 */
proto.tierkreis.v1alpha.graph.PairValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Value;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader);
      msg.setFirst(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Value;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader);
      msg.setSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.PairValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.PairValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.PairValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.PairValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirst();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter
    );
  }
  f = message.getSecond();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value first = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Value}
 */
proto.tierkreis.v1alpha.graph.PairValue.prototype.getFirst = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Value} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Value, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Value|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.PairValue} returns this
*/
proto.tierkreis.v1alpha.graph.PairValue.prototype.setFirst = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.PairValue} returns this
 */
proto.tierkreis.v1alpha.graph.PairValue.prototype.clearFirst = function() {
  return this.setFirst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.PairValue.prototype.hasFirst = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value second = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Value}
 */
proto.tierkreis.v1alpha.graph.PairValue.prototype.getSecond = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Value} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Value, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Value|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.PairValue} returns this
*/
proto.tierkreis.v1alpha.graph.PairValue.prototype.setSecond = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.PairValue} returns this
 */
proto.tierkreis.v1alpha.graph.PairValue.prototype.clearSecond = function() {
  return this.setSecond(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.PairValue.prototype.hasSecond = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tierkreis.v1alpha.graph.MapValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.MapValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.MapValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.MapValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.MapValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    pairsList: jspb.Message.toObjectList(msg.getPairsList(),
    proto.tierkreis.v1alpha.graph.PairValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.MapValue}
 */
proto.tierkreis.v1alpha.graph.MapValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.MapValue;
  return proto.tierkreis.v1alpha.graph.MapValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.MapValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.MapValue}
 */
proto.tierkreis.v1alpha.graph.MapValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.PairValue;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.PairValue.deserializeBinaryFromReader);
      msg.addPairs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.MapValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.MapValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.MapValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.MapValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.PairValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PairValue pairs = 1;
 * @return {!Array<!proto.tierkreis.v1alpha.graph.PairValue>}
 */
proto.tierkreis.v1alpha.graph.MapValue.prototype.getPairsList = function() {
  return /** @type{!Array<!proto.tierkreis.v1alpha.graph.PairValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tierkreis.v1alpha.graph.PairValue, 1));
};


/**
 * @param {!Array<!proto.tierkreis.v1alpha.graph.PairValue>} value
 * @return {!proto.tierkreis.v1alpha.graph.MapValue} returns this
*/
proto.tierkreis.v1alpha.graph.MapValue.prototype.setPairsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tierkreis.v1alpha.graph.PairValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.PairValue}
 */
proto.tierkreis.v1alpha.graph.MapValue.prototype.addPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tierkreis.v1alpha.graph.PairValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.MapValue} returns this
 */
proto.tierkreis.v1alpha.graph.MapValue.prototype.clearPairsList = function() {
  return this.setPairsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tierkreis.v1alpha.graph.VecValue.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.VecValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.VecValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.VecValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.VecValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    vecList: jspb.Message.toObjectList(msg.getVecList(),
    proto.tierkreis.v1alpha.graph.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.VecValue}
 */
proto.tierkreis.v1alpha.graph.VecValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.VecValue;
  return proto.tierkreis.v1alpha.graph.VecValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.VecValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.VecValue}
 */
proto.tierkreis.v1alpha.graph.VecValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Value;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader);
      msg.addVec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.VecValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.VecValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.VecValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.VecValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVecList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Value vec = 2;
 * @return {!Array<!proto.tierkreis.v1alpha.graph.Value>}
 */
proto.tierkreis.v1alpha.graph.VecValue.prototype.getVecList = function() {
  return /** @type{!Array<!proto.tierkreis.v1alpha.graph.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tierkreis.v1alpha.graph.Value, 2));
};


/**
 * @param {!Array<!proto.tierkreis.v1alpha.graph.Value>} value
 * @return {!proto.tierkreis.v1alpha.graph.VecValue} returns this
*/
proto.tierkreis.v1alpha.graph.VecValue.prototype.setVecList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tierkreis.v1alpha.graph.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.Value}
 */
proto.tierkreis.v1alpha.graph.VecValue.prototype.addVec = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tierkreis.v1alpha.graph.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.VecValue} returns this
 */
proto.tierkreis.v1alpha.graph.VecValue.prototype.clearVecList = function() {
  return this.setVecList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.VariantValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.VariantValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.VariantValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.VariantValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.tierkreis.v1alpha.graph.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.VariantValue}
 */
proto.tierkreis.v1alpha.graph.VariantValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.VariantValue;
  return proto.tierkreis.v1alpha.graph.VariantValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.VariantValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.VariantValue}
 */
proto.tierkreis.v1alpha.graph.VariantValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Value;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.VariantValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.VariantValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.VariantValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.VariantValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.VariantValue.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.VariantValue} returns this
 */
proto.tierkreis.v1alpha.graph.VariantValue.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Value}
 */
proto.tierkreis.v1alpha.graph.VariantValue.prototype.getValue = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Value} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Value, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Value|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.VariantValue} returns this
*/
proto.tierkreis.v1alpha.graph.VariantValue.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.VariantValue} returns this
 */
proto.tierkreis.v1alpha.graph.VariantValue.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.VariantValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tierkreis.v1alpha.graph.Value.oneofGroups_ = [[1,2,3,9,10,4,5,7,8,12]];

/**
 * @enum {number}
 */
proto.tierkreis.v1alpha.graph.Value.ValueCase = {
  VALUE_NOT_SET: 0,
  GRAPH: 1,
  INTEGER: 2,
  BOOLEAN: 3,
  STR: 9,
  FLT: 10,
  PAIR: 4,
  VEC: 5,
  MAP: 7,
  STRUCT: 8,
  VARIANT: 12
};

/**
 * @return {proto.tierkreis.v1alpha.graph.Value.ValueCase}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getValueCase = function() {
  return /** @type {proto.tierkreis.v1alpha.graph.Value.ValueCase} */(jspb.Message.computeOneofCase(this, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    graph: (f = msg.getGraph()) && proto.tierkreis.v1alpha.graph.Graph.toObject(includeInstance, f),
    integer: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pb_boolean: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    str: jspb.Message.getFieldWithDefault(msg, 9, ""),
    flt: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    pair: (f = msg.getPair()) && proto.tierkreis.v1alpha.graph.PairValue.toObject(includeInstance, f),
    vec: (f = msg.getVec()) && proto.tierkreis.v1alpha.graph.VecValue.toObject(includeInstance, f),
    map: (f = msg.getMap()) && proto.tierkreis.v1alpha.graph.MapValue.toObject(includeInstance, f),
    struct: (f = msg.getStruct()) && proto.tierkreis.v1alpha.graph.StructValue.toObject(includeInstance, f),
    variant: (f = msg.getVariant()) && proto.tierkreis.v1alpha.graph.VariantValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Value}
 */
proto.tierkreis.v1alpha.graph.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Value;
  return proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Value}
 */
proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Graph;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Graph.deserializeBinaryFromReader);
      msg.setGraph(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInteger(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFlt(value);
      break;
    case 4:
      var value = new proto.tierkreis.v1alpha.graph.PairValue;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.PairValue.deserializeBinaryFromReader);
      msg.setPair(value);
      break;
    case 5:
      var value = new proto.tierkreis.v1alpha.graph.VecValue;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.VecValue.deserializeBinaryFromReader);
      msg.setVec(value);
      break;
    case 7:
      var value = new proto.tierkreis.v1alpha.graph.MapValue;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.MapValue.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 8:
      var value = new proto.tierkreis.v1alpha.graph.StructValue;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.StructValue.deserializeBinaryFromReader);
      msg.setStruct(value);
      break;
    case 12:
      var value = new proto.tierkreis.v1alpha.graph.VariantValue;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.VariantValue.deserializeBinaryFromReader);
      msg.setVariant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraph();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Graph.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getPair();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tierkreis.v1alpha.graph.PairValue.serializeBinaryToWriter
    );
  }
  f = message.getVec();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tierkreis.v1alpha.graph.VecValue.serializeBinaryToWriter
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.tierkreis.v1alpha.graph.MapValue.serializeBinaryToWriter
    );
  }
  f = message.getStruct();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.tierkreis.v1alpha.graph.StructValue.serializeBinaryToWriter
    );
  }
  f = message.getVariant();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.tierkreis.v1alpha.graph.VariantValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Graph graph = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Graph}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getGraph = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Graph} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Graph, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Graph|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
*/
proto.tierkreis.v1alpha.graph.Value.prototype.setGraph = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearGraph = function() {
  return this.setGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasGraph = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 integer = 2;
 * @return {number}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getInteger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.setInteger = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearInteger = function() {
  return jspb.Message.setOneofField(this, 2, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasInteger = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool boolean = 3;
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearBoolean = function() {
  return jspb.Message.setOneofField(this, 3, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string str = 9;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.setStr = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearStr = function() {
  return jspb.Message.setOneofField(this, 9, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasStr = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double flt = 10;
 * @return {number}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getFlt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.setFlt = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearFlt = function() {
  return jspb.Message.setOneofField(this, 10, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasFlt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PairValue pair = 4;
 * @return {?proto.tierkreis.v1alpha.graph.PairValue}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getPair = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.PairValue} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.PairValue, 4));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.PairValue|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
*/
proto.tierkreis.v1alpha.graph.Value.prototype.setPair = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearPair = function() {
  return this.setPair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasPair = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional VecValue vec = 5;
 * @return {?proto.tierkreis.v1alpha.graph.VecValue}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getVec = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.VecValue} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.VecValue, 5));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.VecValue|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
*/
proto.tierkreis.v1alpha.graph.Value.prototype.setVec = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearVec = function() {
  return this.setVec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasVec = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MapValue map = 7;
 * @return {?proto.tierkreis.v1alpha.graph.MapValue}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getMap = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.MapValue} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.MapValue, 7));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.MapValue|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
*/
proto.tierkreis.v1alpha.graph.Value.prototype.setMap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasMap = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional StructValue struct = 8;
 * @return {?proto.tierkreis.v1alpha.graph.StructValue}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getStruct = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.StructValue} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.StructValue, 8));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.StructValue|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
*/
proto.tierkreis.v1alpha.graph.Value.prototype.setStruct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearStruct = function() {
  return this.setStruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasStruct = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional VariantValue variant = 12;
 * @return {?proto.tierkreis.v1alpha.graph.VariantValue}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.getVariant = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.VariantValue} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.VariantValue, 12));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.VariantValue|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
*/
proto.tierkreis.v1alpha.graph.Value.prototype.setVariant = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.tierkreis.v1alpha.graph.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Value} returns this
 */
proto.tierkreis.v1alpha.graph.Value.prototype.clearVariant = function() {
  return this.setVariant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Value.prototype.hasVariant = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    edge: (f = msg.getEdge()) && proto.tierkreis.v1alpha.graph.Edge.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.tierkreis.v1alpha.graph.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Output}
 */
proto.tierkreis.v1alpha.graph.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Output;
  return proto.tierkreis.v1alpha.graph.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Output}
 */
proto.tierkreis.v1alpha.graph.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Edge;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Edge.deserializeBinaryFromReader);
      msg.setEdge(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Value;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdge();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Edge.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Edge edge = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Edge}
 */
proto.tierkreis.v1alpha.graph.Output.prototype.getEdge = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Edge} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Edge, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Edge|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Output} returns this
*/
proto.tierkreis.v1alpha.graph.Output.prototype.setEdge = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Output} returns this
 */
proto.tierkreis.v1alpha.graph.Output.prototype.clearEdge = function() {
  return this.setEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Output.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value value = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Value}
 */
proto.tierkreis.v1alpha.graph.Output.prototype.getValue = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Value} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Value, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Value|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Output} returns this
*/
proto.tierkreis.v1alpha.graph.Output.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Output} returns this
 */
proto.tierkreis.v1alpha.graph.Output.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Output.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tierkreis.v1alpha.graph.OutputStream.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.OutputStream.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.OutputStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.OutputStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.OutputStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamList: jspb.Message.toObjectList(msg.getStreamList(),
    proto.tierkreis.v1alpha.graph.Output.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.OutputStream}
 */
proto.tierkreis.v1alpha.graph.OutputStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.OutputStream;
  return proto.tierkreis.v1alpha.graph.OutputStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.OutputStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.OutputStream}
 */
proto.tierkreis.v1alpha.graph.OutputStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Output;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Output.deserializeBinaryFromReader);
      msg.addStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.OutputStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.OutputStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.OutputStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.OutputStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Output.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Output stream = 1;
 * @return {!Array<!proto.tierkreis.v1alpha.graph.Output>}
 */
proto.tierkreis.v1alpha.graph.OutputStream.prototype.getStreamList = function() {
  return /** @type{!Array<!proto.tierkreis.v1alpha.graph.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tierkreis.v1alpha.graph.Output, 1));
};


/**
 * @param {!Array<!proto.tierkreis.v1alpha.graph.Output>} value
 * @return {!proto.tierkreis.v1alpha.graph.OutputStream} returns this
*/
proto.tierkreis.v1alpha.graph.OutputStream.prototype.setStreamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tierkreis.v1alpha.graph.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.Output}
 */
proto.tierkreis.v1alpha.graph.OutputStream.prototype.addStream = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tierkreis.v1alpha.graph.Output, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.OutputStream} returns this
 */
proto.tierkreis.v1alpha.graph.OutputStream.prototype.clearStreamList = function() {
  return this.setStreamList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tierkreis.v1alpha.graph.Type.oneofGroups_ = [[1,2,3,4,5,6,7,9,10,11,12,14]];

/**
 * @enum {number}
 */
proto.tierkreis.v1alpha.graph.Type.TypeCase = {
  TYPE_NOT_SET: 0,
  VAR: 1,
  INT: 2,
  BOOL: 3,
  GRAPH: 4,
  PAIR: 5,
  VEC: 6,
  ROW: 7,
  MAP: 9,
  STRUCT: 10,
  STR: 11,
  FLT: 12,
  VARIANT: 14
};

/**
 * @return {proto.tierkreis.v1alpha.graph.Type.TypeCase}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getTypeCase = function() {
  return /** @type {proto.tierkreis.v1alpha.graph.Type.TypeCase} */(jspb.Message.computeOneofCase(this, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_var: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_int: (f = msg.getInt()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f),
    bool: (f = msg.getBool()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f),
    graph: (f = msg.getGraph()) && proto.tierkreis.v1alpha.graph.GraphType.toObject(includeInstance, f),
    pair: (f = msg.getPair()) && proto.tierkreis.v1alpha.graph.PairType.toObject(includeInstance, f),
    vec: (f = msg.getVec()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f),
    row: (f = msg.getRow()) && proto.tierkreis.v1alpha.graph.RowType.toObject(includeInstance, f),
    map: (f = msg.getMap()) && proto.tierkreis.v1alpha.graph.PairType.toObject(includeInstance, f),
    struct: (f = msg.getStruct()) && proto.tierkreis.v1alpha.graph.StructType.toObject(includeInstance, f),
    str: (f = msg.getStr()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f),
    flt: (f = msg.getFlt()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f),
    variant: (f = msg.getVariant()) && proto.tierkreis.v1alpha.graph.RowType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Type;
  return proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVar(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setInt(value);
      break;
    case 3:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setBool(value);
      break;
    case 4:
      var value = new proto.tierkreis.v1alpha.graph.GraphType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.GraphType.deserializeBinaryFromReader);
      msg.setGraph(value);
      break;
    case 5:
      var value = new proto.tierkreis.v1alpha.graph.PairType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.PairType.deserializeBinaryFromReader);
      msg.setPair(value);
      break;
    case 6:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setVec(value);
      break;
    case 7:
      var value = new proto.tierkreis.v1alpha.graph.RowType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.RowType.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    case 9:
      var value = new proto.tierkreis.v1alpha.graph.PairType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.PairType.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 10:
      var value = new proto.tierkreis.v1alpha.graph.StructType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.StructType.deserializeBinaryFromReader);
      msg.setStruct(value);
      break;
    case 11:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setStr(value);
      break;
    case 12:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setFlt(value);
      break;
    case 14:
      var value = new proto.tierkreis.v1alpha.graph.RowType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.RowType.deserializeBinaryFromReader);
      msg.setVariant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
  f = message.getBool();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
  f = message.getGraph();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tierkreis.v1alpha.graph.GraphType.serializeBinaryToWriter
    );
  }
  f = message.getPair();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tierkreis.v1alpha.graph.PairType.serializeBinaryToWriter
    );
  }
  f = message.getVec();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.tierkreis.v1alpha.graph.RowType.serializeBinaryToWriter
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.tierkreis.v1alpha.graph.PairType.serializeBinaryToWriter
    );
  }
  f = message.getStruct();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.tierkreis.v1alpha.graph.StructType.serializeBinaryToWriter
    );
  }
  f = message.getStr();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
  f = message.getFlt();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
  f = message.getVariant();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.tierkreis.v1alpha.graph.RowType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string var = 1;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getVar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.setVar = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearVar = function() {
  return jspb.Message.setOneofField(this, 1, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasVar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Empty int = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getInt = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setInt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearInt = function() {
  return this.setInt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasInt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Empty bool = 3;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getBool = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 3));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setBool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearBool = function() {
  return this.setBool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasBool = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GraphType graph = 4;
 * @return {?proto.tierkreis.v1alpha.graph.GraphType}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getGraph = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.GraphType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.GraphType, 4));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.GraphType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setGraph = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearGraph = function() {
  return this.setGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasGraph = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PairType pair = 5;
 * @return {?proto.tierkreis.v1alpha.graph.PairType}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getPair = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.PairType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.PairType, 5));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.PairType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setPair = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearPair = function() {
  return this.setPair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasPair = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Type vec = 6;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getVec = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 6));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setVec = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearVec = function() {
  return this.setVec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasVec = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RowType row = 7;
 * @return {?proto.tierkreis.v1alpha.graph.RowType}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getRow = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.RowType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.RowType, 7));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.RowType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setRow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasRow = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PairType map = 9;
 * @return {?proto.tierkreis.v1alpha.graph.PairType}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getMap = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.PairType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.PairType, 9));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.PairType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setMap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasMap = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional StructType struct = 10;
 * @return {?proto.tierkreis.v1alpha.graph.StructType}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getStruct = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.StructType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.StructType, 10));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.StructType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setStruct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearStruct = function() {
  return this.setStruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasStruct = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Empty str = 11;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getStr = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 11));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setStr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearStr = function() {
  return this.setStr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasStr = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Empty flt = 12;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getFlt = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 12));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setFlt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearFlt = function() {
  return this.setFlt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasFlt = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RowType variant = 14;
 * @return {?proto.tierkreis.v1alpha.graph.RowType}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.getVariant = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.RowType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.RowType, 14));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.RowType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
*/
proto.tierkreis.v1alpha.graph.Type.prototype.setVariant = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.tierkreis.v1alpha.graph.Type.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Type} returns this
 */
proto.tierkreis.v1alpha.graph.Type.prototype.clearVariant = function() {
  return this.setVariant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Type.prototype.hasVariant = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.GraphType.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.GraphType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.GraphType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.GraphType.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputs: (f = msg.getInputs()) && proto.tierkreis.v1alpha.graph.RowType.toObject(includeInstance, f),
    outputs: (f = msg.getOutputs()) && proto.tierkreis.v1alpha.graph.RowType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.GraphType}
 */
proto.tierkreis.v1alpha.graph.GraphType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.GraphType;
  return proto.tierkreis.v1alpha.graph.GraphType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.GraphType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.GraphType}
 */
proto.tierkreis.v1alpha.graph.GraphType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.RowType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.RowType.deserializeBinaryFromReader);
      msg.setInputs(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.RowType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.RowType.deserializeBinaryFromReader);
      msg.setOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.GraphType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.GraphType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.GraphType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.GraphType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.RowType.serializeBinaryToWriter
    );
  }
  f = message.getOutputs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.RowType.serializeBinaryToWriter
    );
  }
};


/**
 * optional RowType inputs = 1;
 * @return {?proto.tierkreis.v1alpha.graph.RowType}
 */
proto.tierkreis.v1alpha.graph.GraphType.prototype.getInputs = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.RowType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.RowType, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.RowType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.GraphType} returns this
*/
proto.tierkreis.v1alpha.graph.GraphType.prototype.setInputs = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.GraphType} returns this
 */
proto.tierkreis.v1alpha.graph.GraphType.prototype.clearInputs = function() {
  return this.setInputs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.GraphType.prototype.hasInputs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RowType outputs = 2;
 * @return {?proto.tierkreis.v1alpha.graph.RowType}
 */
proto.tierkreis.v1alpha.graph.GraphType.prototype.getOutputs = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.RowType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.RowType, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.RowType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.GraphType} returns this
*/
proto.tierkreis.v1alpha.graph.GraphType.prototype.setOutputs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.GraphType} returns this
 */
proto.tierkreis.v1alpha.graph.GraphType.prototype.clearOutputs = function() {
  return this.setOutputs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.GraphType.prototype.hasOutputs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.PairType.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.PairType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.PairType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.PairType.toObject = function(includeInstance, msg) {
  var f, obj = {
    first: (f = msg.getFirst()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f),
    second: (f = msg.getSecond()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.PairType}
 */
proto.tierkreis.v1alpha.graph.PairType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.PairType;
  return proto.tierkreis.v1alpha.graph.PairType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.PairType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.PairType}
 */
proto.tierkreis.v1alpha.graph.PairType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setFirst(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.PairType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.PairType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.PairType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.PairType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirst();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
  f = message.getSecond();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type first = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.PairType.prototype.getFirst = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.PairType} returns this
*/
proto.tierkreis.v1alpha.graph.PairType.prototype.setFirst = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.PairType} returns this
 */
proto.tierkreis.v1alpha.graph.PairType.prototype.clearFirst = function() {
  return this.setFirst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.PairType.prototype.hasFirst = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type second = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.PairType.prototype.getSecond = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.PairType} returns this
*/
proto.tierkreis.v1alpha.graph.PairType.prototype.setSecond = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.PairType} returns this
 */
proto.tierkreis.v1alpha.graph.PairType.prototype.clearSecond = function() {
  return this.setSecond(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.PairType.prototype.hasSecond = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.RowType.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.RowType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.RowType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.RowType.toObject = function(includeInstance, msg) {
  var f, obj = {
    contentMap: (f = msg.getContentMap()) ? f.toObject(includeInstance, proto.tierkreis.v1alpha.graph.Type.toObject) : [],
    rest: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.RowType}
 */
proto.tierkreis.v1alpha.graph.RowType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.RowType;
  return proto.tierkreis.v1alpha.graph.RowType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.RowType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.RowType}
 */
proto.tierkreis.v1alpha.graph.RowType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getContentMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader, "", new proto.tierkreis.v1alpha.graph.Type());
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.RowType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.RowType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.RowType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.RowType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter);
  }
  f = message.getRest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * map<string, Type> content = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tierkreis.v1alpha.graph.Type>}
 */
proto.tierkreis.v1alpha.graph.RowType.prototype.getContentMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.tierkreis.v1alpha.graph.Type>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.tierkreis.v1alpha.graph.Type));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tierkreis.v1alpha.graph.RowType} returns this
 */
proto.tierkreis.v1alpha.graph.RowType.prototype.clearContentMap = function() {
  this.getContentMap().clear();
  return this;};


/**
 * optional string rest = 2;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.RowType.prototype.getRest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.RowType} returns this
 */
proto.tierkreis.v1alpha.graph.RowType.prototype.setRest = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tierkreis.v1alpha.graph.StructType.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.tierkreis.v1alpha.graph.StructType.NameOptCase = {
  NAME_OPT_NOT_SET: 0,
  NAME: 2
};

/**
 * @return {proto.tierkreis.v1alpha.graph.StructType.NameOptCase}
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.getNameOptCase = function() {
  return /** @type {proto.tierkreis.v1alpha.graph.StructType.NameOptCase} */(jspb.Message.computeOneofCase(this, proto.tierkreis.v1alpha.graph.StructType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.StructType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.StructType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.StructType.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.tierkreis.v1alpha.graph.RowType.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.StructType}
 */
proto.tierkreis.v1alpha.graph.StructType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.StructType;
  return proto.tierkreis.v1alpha.graph.StructType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.StructType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.StructType}
 */
proto.tierkreis.v1alpha.graph.StructType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.RowType;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.RowType.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.StructType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.StructType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.StructType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.RowType.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional RowType shape = 1;
 * @return {?proto.tierkreis.v1alpha.graph.RowType}
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.getShape = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.RowType} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.RowType, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.RowType|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.StructType} returns this
*/
proto.tierkreis.v1alpha.graph.StructType.prototype.setShape = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.StructType} returns this
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.clearShape = function() {
  return this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.hasShape = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.StructType} returns this
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.tierkreis.v1alpha.graph.StructType.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.StructType} returns this
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 2, proto.tierkreis.v1alpha.graph.StructType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.StructType.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tierkreis.v1alpha.graph.FunctionName.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.FunctionName.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.FunctionName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.FunctionName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.FunctionName.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespacesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.FunctionName}
 */
proto.tierkreis.v1alpha.graph.FunctionName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.FunctionName;
  return proto.tierkreis.v1alpha.graph.FunctionName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.FunctionName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.FunctionName}
 */
proto.tierkreis.v1alpha.graph.FunctionName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNamespaces(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.FunctionName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.FunctionName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.FunctionName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.FunctionName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespacesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string namespaces = 1;
 * @return {!Array<string>}
 */
proto.tierkreis.v1alpha.graph.FunctionName.prototype.getNamespacesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tierkreis.v1alpha.graph.FunctionName} returns this
 */
proto.tierkreis.v1alpha.graph.FunctionName.prototype.setNamespacesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.FunctionName} returns this
 */
proto.tierkreis.v1alpha.graph.FunctionName.prototype.addNamespaces = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.FunctionName} returns this
 */
proto.tierkreis.v1alpha.graph.FunctionName.prototype.clearNamespacesList = function() {
  return this.setNamespacesList([]);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.FunctionName.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.FunctionName} returns this
 */
proto.tierkreis.v1alpha.graph.FunctionName.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.BoxNode.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.BoxNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.BoxNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.BoxNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    loc: (f = msg.getLoc()) && proto.tierkreis.v1alpha.graph.Location.toObject(includeInstance, f),
    graph: (f = msg.getGraph()) && proto.tierkreis.v1alpha.graph.Graph.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.BoxNode}
 */
proto.tierkreis.v1alpha.graph.BoxNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.BoxNode;
  return proto.tierkreis.v1alpha.graph.BoxNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.BoxNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.BoxNode}
 */
proto.tierkreis.v1alpha.graph.BoxNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Location;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Location.deserializeBinaryFromReader);
      msg.setLoc(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Graph;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Graph.deserializeBinaryFromReader);
      msg.setGraph(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.BoxNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.BoxNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.BoxNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.BoxNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Location.serializeBinaryToWriter
    );
  }
  f = message.getGraph();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Graph.serializeBinaryToWriter
    );
  }
};


/**
 * optional Location loc = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Location}
 */
proto.tierkreis.v1alpha.graph.BoxNode.prototype.getLoc = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Location} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Location, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Location|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.BoxNode} returns this
*/
proto.tierkreis.v1alpha.graph.BoxNode.prototype.setLoc = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.BoxNode} returns this
 */
proto.tierkreis.v1alpha.graph.BoxNode.prototype.clearLoc = function() {
  return this.setLoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.BoxNode.prototype.hasLoc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Graph graph = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Graph}
 */
proto.tierkreis.v1alpha.graph.BoxNode.prototype.getGraph = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Graph} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Graph, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Graph|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.BoxNode} returns this
*/
proto.tierkreis.v1alpha.graph.BoxNode.prototype.setGraph = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.BoxNode} returns this
 */
proto.tierkreis.v1alpha.graph.BoxNode.prototype.clearGraph = function() {
  return this.setGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.BoxNode.prototype.hasGraph = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tierkreis.v1alpha.graph.Node.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.tierkreis.v1alpha.graph.Node.NodeCase = {
  NODE_NOT_SET: 0,
  INPUT: 1,
  OUTPUT: 2,
  CONST: 3,
  BOX: 4,
  FUNCTION: 5,
  MATCH: 6,
  TAG: 7
};

/**
 * @return {proto.tierkreis.v1alpha.graph.Node.NodeCase}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.getNodeCase = function() {
  return /** @type {proto.tierkreis.v1alpha.graph.Node.NodeCase} */(jspb.Message.computeOneofCase(this, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f),
    pb_const: (f = msg.getConst()) && proto.tierkreis.v1alpha.graph.Value.toObject(includeInstance, f),
    box: (f = msg.getBox()) && proto.tierkreis.v1alpha.graph.BoxNode.toObject(includeInstance, f),
    pb_function: (f = msg.getFunction()) && proto.tierkreis.v1alpha.graph.FunctionName.toObject(includeInstance, f),
    match: (f = msg.getMatch()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f),
    tag: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Node}
 */
proto.tierkreis.v1alpha.graph.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Node;
  return proto.tierkreis.v1alpha.graph.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Node}
 */
proto.tierkreis.v1alpha.graph.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 3:
      var value = new proto.tierkreis.v1alpha.graph.Value;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Value.deserializeBinaryFromReader);
      msg.setConst(value);
      break;
    case 4:
      var value = new proto.tierkreis.v1alpha.graph.BoxNode;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.BoxNode.deserializeBinaryFromReader);
      msg.setBox(value);
      break;
    case 5:
      var value = new proto.tierkreis.v1alpha.graph.FunctionName;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.FunctionName.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 6:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setMatch(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
  f = message.getConst();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tierkreis.v1alpha.graph.Value.serializeBinaryToWriter
    );
  }
  f = message.getBox();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tierkreis.v1alpha.graph.BoxNode.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tierkreis.v1alpha.graph.FunctionName.serializeBinaryToWriter
    );
  }
  f = message.getMatch();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional Empty input = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.getInput = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
*/
proto.tierkreis.v1alpha.graph.Node.prototype.setInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
 */
proto.tierkreis.v1alpha.graph.Node.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Empty output = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.getOutput = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
*/
proto.tierkreis.v1alpha.graph.Node.prototype.setOutput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
 */
proto.tierkreis.v1alpha.graph.Node.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Value const = 3;
 * @return {?proto.tierkreis.v1alpha.graph.Value}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.getConst = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Value} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Value, 3));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Value|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
*/
proto.tierkreis.v1alpha.graph.Node.prototype.setConst = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
 */
proto.tierkreis.v1alpha.graph.Node.prototype.clearConst = function() {
  return this.setConst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.hasConst = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BoxNode box = 4;
 * @return {?proto.tierkreis.v1alpha.graph.BoxNode}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.getBox = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.BoxNode} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.BoxNode, 4));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.BoxNode|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
*/
proto.tierkreis.v1alpha.graph.Node.prototype.setBox = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
 */
proto.tierkreis.v1alpha.graph.Node.prototype.clearBox = function() {
  return this.setBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.hasBox = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FunctionName function = 5;
 * @return {?proto.tierkreis.v1alpha.graph.FunctionName}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.getFunction = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.FunctionName} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.FunctionName, 5));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.FunctionName|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
*/
proto.tierkreis.v1alpha.graph.Node.prototype.setFunction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
 */
proto.tierkreis.v1alpha.graph.Node.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Empty match = 6;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.getMatch = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 6));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
*/
proto.tierkreis.v1alpha.graph.Node.prototype.setMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
 */
proto.tierkreis.v1alpha.graph.Node.prototype.clearMatch = function() {
  return this.setMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.hasMatch = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string tag = 7;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
 */
proto.tierkreis.v1alpha.graph.Node.prototype.setTag = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Node} returns this
 */
proto.tierkreis.v1alpha.graph.Node.prototype.clearTag = function() {
  return jspb.Message.setOneofField(this, 7, proto.tierkreis.v1alpha.graph.Node.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Node.prototype.hasTag = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    portFrom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    portTo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodeFrom: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nodeTo: jspb.Message.getFieldWithDefault(msg, 4, 0),
    edgeType: (f = msg.getEdgeType()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Edge}
 */
proto.tierkreis.v1alpha.graph.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Edge;
  return proto.tierkreis.v1alpha.graph.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Edge}
 */
proto.tierkreis.v1alpha.graph.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNodeFrom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNodeTo(value);
      break;
    case 5:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setEdgeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPortTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodeFrom();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getNodeTo();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getEdgeType();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional string port_from = 1;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.getPortFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.Edge} returns this
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.setPortFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string port_to = 2;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.getPortTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.Edge} returns this
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.setPortTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 node_from = 3;
 * @return {number}
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.getNodeFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tierkreis.v1alpha.graph.Edge} returns this
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.setNodeFrom = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 node_to = 4;
 * @return {number}
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.getNodeTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tierkreis.v1alpha.graph.Edge} returns this
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.setNodeTo = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Type edge_type = 5;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.getEdgeType = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 5));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Edge} returns this
*/
proto.tierkreis.v1alpha.graph.Edge.prototype.setEdgeType = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Edge} returns this
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.clearEdgeType = function() {
  return this.setEdgeType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Edge.prototype.hasEdgeType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tierkreis.v1alpha.graph.Graph.repeatedFields_ = [1,2,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Graph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.tierkreis.v1alpha.graph.Node.toObject, includeInstance),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.tierkreis.v1alpha.graph.Edge.toObject, includeInstance),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputOrderList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    outputOrderList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Graph}
 */
proto.tierkreis.v1alpha.graph.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Graph;
  return proto.tierkreis.v1alpha.graph.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Graph}
 */
proto.tierkreis.v1alpha.graph.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Node;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Edge;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Edge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addInputOrder(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutputOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Node.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Edge.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputOrderList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getOutputOrderList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * repeated Node nodes = 1;
 * @return {!Array<!proto.tierkreis.v1alpha.graph.Node>}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.tierkreis.v1alpha.graph.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tierkreis.v1alpha.graph.Node, 1));
};


/**
 * @param {!Array<!proto.tierkreis.v1alpha.graph.Node>} value
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
*/
proto.tierkreis.v1alpha.graph.Graph.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tierkreis.v1alpha.graph.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.Node}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tierkreis.v1alpha.graph.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * repeated Edge edges = 2;
 * @return {!Array<!proto.tierkreis.v1alpha.graph.Edge>}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.tierkreis.v1alpha.graph.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tierkreis.v1alpha.graph.Edge, 2));
};


/**
 * @param {!Array<!proto.tierkreis.v1alpha.graph.Edge>} value
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
*/
proto.tierkreis.v1alpha.graph.Graph.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tierkreis.v1alpha.graph.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.Edge}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tierkreis.v1alpha.graph.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string input_order = 4;
 * @return {!Array<string>}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.getInputOrderList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.setInputOrderList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.addInputOrder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.clearInputOrderList = function() {
  return this.setInputOrderList([]);
};


/**
 * repeated string output_order = 5;
 * @return {!Array<string>}
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.getOutputOrderList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.setOutputOrderList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.addOutputOrder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.Graph} returns this
 */
proto.tierkreis.v1alpha.graph.Graph.prototype.clearOutputOrderList = function() {
  return this.setOutputOrderList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Empty;
  return proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tierkreis.v1alpha.graph.TypeScheme.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.TypeScheme.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.TypeScheme} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.TypeScheme.toObject = function(includeInstance, msg) {
  var f, obj = {
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.tierkreis.v1alpha.graph.TypeSchemeVar.toObject, includeInstance),
    constraintsList: jspb.Message.toObjectList(msg.getConstraintsList(),
    proto.tierkreis.v1alpha.graph.Constraint.toObject, includeInstance),
    body: (f = msg.getBody()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.TypeScheme}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.TypeScheme;
  return proto.tierkreis.v1alpha.graph.TypeScheme.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.TypeScheme} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.TypeScheme}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.TypeSchemeVar;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.TypeSchemeVar.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Constraint;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Constraint.deserializeBinaryFromReader);
      msg.addConstraints(value);
      break;
    case 3:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.TypeScheme.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.TypeScheme} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.TypeScheme.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.TypeSchemeVar.serializeBinaryToWriter
    );
  }
  f = message.getConstraintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Constraint.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TypeSchemeVar variables = 1;
 * @return {!Array<!proto.tierkreis.v1alpha.graph.TypeSchemeVar>}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.tierkreis.v1alpha.graph.TypeSchemeVar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tierkreis.v1alpha.graph.TypeSchemeVar, 1));
};


/**
 * @param {!Array<!proto.tierkreis.v1alpha.graph.TypeSchemeVar>} value
 * @return {!proto.tierkreis.v1alpha.graph.TypeScheme} returns this
*/
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tierkreis.v1alpha.graph.TypeSchemeVar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.TypeSchemeVar}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tierkreis.v1alpha.graph.TypeSchemeVar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.TypeScheme} returns this
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};


/**
 * repeated Constraint constraints = 2;
 * @return {!Array<!proto.tierkreis.v1alpha.graph.Constraint>}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.getConstraintsList = function() {
  return /** @type{!Array<!proto.tierkreis.v1alpha.graph.Constraint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tierkreis.v1alpha.graph.Constraint, 2));
};


/**
 * @param {!Array<!proto.tierkreis.v1alpha.graph.Constraint>} value
 * @return {!proto.tierkreis.v1alpha.graph.TypeScheme} returns this
*/
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.setConstraintsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tierkreis.v1alpha.graph.Constraint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tierkreis.v1alpha.graph.Constraint}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.addConstraints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tierkreis.v1alpha.graph.Constraint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tierkreis.v1alpha.graph.TypeScheme} returns this
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.clearConstraintsList = function() {
  return this.setConstraintsList([]);
};


/**
 * optional Type body = 3;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.getBody = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 3));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.TypeScheme} returns this
*/
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.TypeScheme} returns this
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.TypeScheme.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.TypeSchemeVar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.TypeSchemeVar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kind: (f = msg.getKind()) && proto.tierkreis.v1alpha.graph.Kind.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.TypeSchemeVar}
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.TypeSchemeVar;
  return proto.tierkreis.v1alpha.graph.TypeSchemeVar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.TypeSchemeVar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.TypeSchemeVar}
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Kind;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Kind.deserializeBinaryFromReader);
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.TypeSchemeVar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.TypeSchemeVar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKind();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Kind.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.TypeSchemeVar} returns this
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Kind kind = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Kind}
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.prototype.getKind = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Kind} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Kind, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Kind|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.TypeSchemeVar} returns this
*/
proto.tierkreis.v1alpha.graph.TypeSchemeVar.prototype.setKind = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.TypeSchemeVar} returns this
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.prototype.clearKind = function() {
  return this.setKind(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.TypeSchemeVar.prototype.hasKind = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tierkreis.v1alpha.graph.Constraint.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.tierkreis.v1alpha.graph.Constraint.ConstraintCase = {
  CONSTRAINT_NOT_SET: 0,
  LACKS: 1,
  PARTITION: 2
};

/**
 * @return {proto.tierkreis.v1alpha.graph.Constraint.ConstraintCase}
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.getConstraintCase = function() {
  return /** @type {proto.tierkreis.v1alpha.graph.Constraint.ConstraintCase} */(jspb.Message.computeOneofCase(this, proto.tierkreis.v1alpha.graph.Constraint.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Constraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Constraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Constraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    lacks: (f = msg.getLacks()) && proto.tierkreis.v1alpha.graph.LacksConstraint.toObject(includeInstance, f),
    partition: (f = msg.getPartition()) && proto.tierkreis.v1alpha.graph.PartitionConstraint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Constraint}
 */
proto.tierkreis.v1alpha.graph.Constraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Constraint;
  return proto.tierkreis.v1alpha.graph.Constraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Constraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Constraint}
 */
proto.tierkreis.v1alpha.graph.Constraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.LacksConstraint;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.LacksConstraint.deserializeBinaryFromReader);
      msg.setLacks(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.PartitionConstraint;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.PartitionConstraint.deserializeBinaryFromReader);
      msg.setPartition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Constraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Constraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Constraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLacks();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.LacksConstraint.serializeBinaryToWriter
    );
  }
  f = message.getPartition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.PartitionConstraint.serializeBinaryToWriter
    );
  }
};


/**
 * optional LacksConstraint lacks = 1;
 * @return {?proto.tierkreis.v1alpha.graph.LacksConstraint}
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.getLacks = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.LacksConstraint} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.LacksConstraint, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.LacksConstraint|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Constraint} returns this
*/
proto.tierkreis.v1alpha.graph.Constraint.prototype.setLacks = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.tierkreis.v1alpha.graph.Constraint.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Constraint} returns this
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.clearLacks = function() {
  return this.setLacks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.hasLacks = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PartitionConstraint partition = 2;
 * @return {?proto.tierkreis.v1alpha.graph.PartitionConstraint}
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.getPartition = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.PartitionConstraint} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.PartitionConstraint, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.PartitionConstraint|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Constraint} returns this
*/
proto.tierkreis.v1alpha.graph.Constraint.prototype.setPartition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tierkreis.v1alpha.graph.Constraint.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Constraint} returns this
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.clearPartition = function() {
  return this.setPartition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Constraint.prototype.hasPartition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.PartitionConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.PartitionConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: (f = msg.getLeft()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f),
    union: (f = msg.getUnion()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.PartitionConstraint}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.PartitionConstraint;
  return proto.tierkreis.v1alpha.graph.PartitionConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.PartitionConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.PartitionConstraint}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    case 3:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setUnion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.PartitionConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.PartitionConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
  f = message.getUnion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type left = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.getLeft = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.PartitionConstraint} returns this
*/
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.PartitionConstraint} returns this
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type right = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.getRight = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.PartitionConstraint} returns this
*/
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.PartitionConstraint} returns this
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.hasRight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Type union = 3;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.getUnion = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 3));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.PartitionConstraint} returns this
*/
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.setUnion = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.PartitionConstraint} returns this
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.clearUnion = function() {
  return this.setUnion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.PartitionConstraint.prototype.hasUnion = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.LacksConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.LacksConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    row: (f = msg.getRow()) && proto.tierkreis.v1alpha.graph.Type.toObject(includeInstance, f),
    label: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.LacksConstraint}
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.LacksConstraint;
  return proto.tierkreis.v1alpha.graph.LacksConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.LacksConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.LacksConstraint}
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Type;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Type.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.LacksConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.LacksConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Type.serializeBinaryToWriter
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Type row = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Type}
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.prototype.getRow = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Type} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Type, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Type|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.LacksConstraint} returns this
*/
proto.tierkreis.v1alpha.graph.LacksConstraint.prototype.setRow = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.LacksConstraint} returns this
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.prototype.hasRow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tierkreis.v1alpha.graph.LacksConstraint} returns this
 */
proto.tierkreis.v1alpha.graph.LacksConstraint.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tierkreis.v1alpha.graph.Kind.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.tierkreis.v1alpha.graph.Kind.KindCase = {
  KIND_NOT_SET: 0,
  STAR: 1,
  ROW: 2
};

/**
 * @return {proto.tierkreis.v1alpha.graph.Kind.KindCase}
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.getKindCase = function() {
  return /** @type {proto.tierkreis.v1alpha.graph.Kind.KindCase} */(jspb.Message.computeOneofCase(this, proto.tierkreis.v1alpha.graph.Kind.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.toObject = function(opt_includeInstance) {
  return proto.tierkreis.v1alpha.graph.Kind.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tierkreis.v1alpha.graph.Kind} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Kind.toObject = function(includeInstance, msg) {
  var f, obj = {
    star: (f = msg.getStar()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f),
    row: (f = msg.getRow()) && proto.tierkreis.v1alpha.graph.Empty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tierkreis.v1alpha.graph.Kind}
 */
proto.tierkreis.v1alpha.graph.Kind.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tierkreis.v1alpha.graph.Kind;
  return proto.tierkreis.v1alpha.graph.Kind.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tierkreis.v1alpha.graph.Kind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tierkreis.v1alpha.graph.Kind}
 */
proto.tierkreis.v1alpha.graph.Kind.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setStar(value);
      break;
    case 2:
      var value = new proto.tierkreis.v1alpha.graph.Empty;
      reader.readMessage(value,proto.tierkreis.v1alpha.graph.Empty.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tierkreis.v1alpha.graph.Kind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tierkreis.v1alpha.graph.Kind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tierkreis.v1alpha.graph.Kind.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStar();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tierkreis.v1alpha.graph.Empty.serializeBinaryToWriter
    );
  }
};


/**
 * optional Empty star = 1;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.getStar = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 1));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Kind} returns this
*/
proto.tierkreis.v1alpha.graph.Kind.prototype.setStar = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.tierkreis.v1alpha.graph.Kind.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Kind} returns this
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.clearStar = function() {
  return this.setStar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.hasStar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Empty row = 2;
 * @return {?proto.tierkreis.v1alpha.graph.Empty}
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.getRow = function() {
  return /** @type{?proto.tierkreis.v1alpha.graph.Empty} */ (
    jspb.Message.getWrapperField(this, proto.tierkreis.v1alpha.graph.Empty, 2));
};


/**
 * @param {?proto.tierkreis.v1alpha.graph.Empty|undefined} value
 * @return {!proto.tierkreis.v1alpha.graph.Kind} returns this
*/
proto.tierkreis.v1alpha.graph.Kind.prototype.setRow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tierkreis.v1alpha.graph.Kind.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tierkreis.v1alpha.graph.Kind} returns this
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tierkreis.v1alpha.graph.Kind.prototype.hasRow = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.tierkreis.v1alpha.graph);
